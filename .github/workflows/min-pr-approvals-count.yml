name: Check PR Approvals
on:
    workflow_call:
        inputs:
            pull-number:
                required: true
                type: number
                description: 'Pull request number to be checked.'
            min-approval-count:
                required: false
                type: number
                default: 1
                description: 'Minimum number of unique approvals required.'
        secrets:
            github-token:
                required: true
                description: 'GITHUB_TOKEN with READ rights for pull requests.'
        outputs:
            is_approved:
                description: 'If pull request has required amount of reviews with status "APPROVED"'
                value: ${{ jobs.check_approval.outputs.is_approved }}
jobs:
    check_approvals:
        name: Check Approvals
        runs-on: ubuntu-latest
        outputs:
            is_approved: ${{ steps.check.outputs.is_approved }}
        steps:
            - name: Get approvals count
              id: check
              uses: actions/github-script@v7
              with:
                  github-token: ${{ secrets.github-token }}
                  script: |
                      const pull_number = ${{ inputs.pull-number }};
                      const min_approvals = ${{ inputs.min-approval-count }};

                      const { owner, repo } = context.repo;

                      const reviews = await github.rest.pulls.listReviews({
                          owner,
                          repo,
                          pull_number,
                      });

                      const sortedReviews = reviews.data.sort(
                          (a, b) => new Date(b.submitted_at).getTime() - new Date(a.submitted_at).getTime()
                      );

                      const latestReviews = new Map();

                      for (const review of sortedReviews) {
                        if (review.user && review.state !== 'COMMENTED') {
                          if (!latestReviews.has(review.user.login)) {
                            latestReviews.set(review.user.login, review);
                          }
                        }
                      }

                      const approvedCount = Array.from(latestReviews.values()).filter(review => review.state === 'APPROVED').length;
                      const isApproved = approvedCount >= min_approvals ? 'true' : 'false';

                      console.log(`Minimum required approvals: ${min_approvals}`);
                      console.log(`Unique approvals (newest status): ${approvedCount}`);

                      core.setOutput('is_approved', isApproved);
